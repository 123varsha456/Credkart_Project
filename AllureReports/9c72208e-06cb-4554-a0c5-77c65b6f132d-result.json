{"name": "test_devnagriregister", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=115.0.5790.111)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0073A813+48355]\n\t(No symbol) [0x006CC4B1]\n\t(No symbol) [0x005D5358]\n\t(No symbol) [0x005D1B33]\n\t(No symbol) [0x005C8CA5]\n\t(No symbol) [0x005C9D0A]\n\t(No symbol) [0x005C9003]\n\t(No symbol) [0x005C8355]\n\t(No symbol) [0x005C82EC]\n\t(No symbol) [0x005C6F26]\n\t(No symbol) [0x005C7688]\n\t(No symbol) [0x005D6B52]\n\t(No symbol) [0x0062CF01]\n\t(No symbol) [0x0061A73C]\n\t(No symbol) [0x0062C922]\n\t(No symbol) [0x0061A536]\n\t(No symbol) [0x005F82DC]\n\t(No symbol) [0x005F93DD]\n\tGetHandleVerifier [0x0099AABD+2539405]\n\tGetHandleVerifier [0x009DA78F+2800735]\n\tGetHandleVerifier [0x009D456C+2775612]\n\tGetHandleVerifier [0x007C51E0+616112]\n\t(No symbol) [0x006D5F8C]\n\t(No symbol) [0x006D2328]\n\t(No symbol) [0x006D240B]\n\t(No symbol) [0x006C4FF7]\n\tBaseThreadInitThunk [0x76397D59+25]\n\tRtlInitializeExceptionChain [0x773CB79B+107]\n\tRtlClearBits [0x773CB71F+191]", "trace": "browser = 'chrome'\n\n    @pytest.fixture()\n    def setup(browser):\n        if browser == 'chrome':\n            driver = webdriver.Chrome()\n            print(\"Launching Chrome Browser\")\n        elif browser == 'firefox':\n            options = Options()\n            options.binary_location = 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe'\n            driver = webdriver.Firefox(options=options)\n            print(\"Launching Firefox Browser\")\n        elif browser == 'edge':\n            driver = webdriver.Edge()\n            print(\"Launching Edge Browser\")\n        else:\n            print(\"headlessmode\")\n            chrome_options = webdriver.ChromeOptions()\n            chrome_options.add_argument(\"headless\")\n            #driver = webdriver.Chrome(options=chrome_options)\n            driver = webdriver.Chrome()\n        driver.maximize_window()\n>       driver.get(\"https://automation.credence.in\")\n\ntestCases\\conftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021CB1FCB5D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...dInitThunk [0x76397D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x773CB79B+107]\\\\n\\\\tRtlClearBits [0x773CB71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=115.0.5790.111)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0073A813+48355]\nE       \t(No symbol) [0x006CC4B1]\nE       \t(No symbol) [0x005D5358]\nE       \t(No symbol) [0x005D1B33]\nE       \t(No symbol) [0x005C8CA5]\nE       \t(No symbol) [0x005C9D0A]\nE       \t(No symbol) [0x005C9003]\nE       \t(No symbol) [0x005C8355]\nE       \t(No symbol) [0x005C82EC]\nE       \t(No symbol) [0x005C6F26]\nE       \t(No symbol) [0x005C7688]\nE       \t(No symbol) [0x005D6B52]\nE       \t(No symbol) [0x0062CF01]\nE       \t(No symbol) [0x0061A73C]\nE       \t(No symbol) [0x0062C922]\nE       \t(No symbol) [0x0061A536]\nE       \t(No symbol) [0x005F82DC]\nE       \t(No symbol) [0x005F93DD]\nE       \tGetHandleVerifier [0x0099AABD+2539405]\nE       \tGetHandleVerifier [0x009DA78F+2800735]\nE       \tGetHandleVerifier [0x009D456C+2775612]\nE       \tGetHandleVerifier [0x007C51E0+616112]\nE       \t(No symbol) [0x006D5F8C]\nE       \t(No symbol) [0x006D2328]\nE       \t(No symbol) [0x006D240B]\nE       \t(No symbol) [0x006C4FF7]\nE       \tBaseThreadInitThunk [0x76397D59+25]\nE       \tRtlInitializeExceptionChain [0x773CB79B+107]\nE       \tRtlClearBits [0x773CB71F+191]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "cc85026d-342d-4fe1-97c8-3408ae60d821-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e5d889d1-7caa-4c5b-b9dd-c0cdcde95c52-attachment.txt", "type": "text/plain"}], "start": 1691159599416, "stop": 1691159599416, "uuid": "d9f3fc56-ef8e-46b4-817a-c9dac4d1ce5c", "historyId": "9edde39f0d42423a613e4051796ec09d", "testCaseId": "9edde39f0d42423a613e4051796ec09d", "fullName": "testCases.test_Devnagri.Test_register_001#test_devnagriregister", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Devnagri"}, {"name": "subSuite", "value": "Test_register_001"}, {"name": "host", "value": "VARSHA"}, {"name": "thread", "value": "7000-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Devnagri"}]}