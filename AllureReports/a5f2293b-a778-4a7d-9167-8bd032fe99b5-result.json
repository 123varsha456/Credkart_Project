{"name": "test_devnagriregister", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'New user')]\"}\n  (Session info: chrome=115.0.5790.111); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x002DA813+48355]\n\t(No symbol) [0x0026C4B1]\n\t(No symbol) [0x00175358]\n\t(No symbol) [0x001A09A5]\n\t(No symbol) [0x001A0B3B]\n\t(No symbol) [0x001CE232]\n\t(No symbol) [0x001BA784]\n\t(No symbol) [0x001CC922]\n\t(No symbol) [0x001BA536]\n\t(No symbol) [0x001982DC]\n\t(No symbol) [0x001993DD]\n\tGetHandleVerifier [0x0053AABD+2539405]\n\tGetHandleVerifier [0x0057A78F+2800735]\n\tGetHandleVerifier [0x0057456C+2775612]\n\tGetHandleVerifier [0x003651E0+616112]\n\t(No symbol) [0x00275F8C]\n\t(No symbol) [0x00272328]\n\t(No symbol) [0x0027240B]\n\t(No symbol) [0x00264FF7]\n\tBaseThreadInitThunk [0x76397D59+25]\n\tRtlInitializeExceptionChain [0x773CB79B+107]\n\tRtlClearBits [0x773CB71F+191]\n\t(No symbol) [0x00000000]", "trace": "self = <testCases.test_Devnagri.Test_register_001 object at 0x000001B5D12B1BD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"71836ef61e12712cb470ffded5e07ab8\")>\n\n    def test_devnagriregister(self,setup):\n        self.driver=setup\n        self.rg=Register(self.driver)\n        time.sleep(2)\n        self.rg.Login_URL()\n        self.rg.HOMEPAGE()\n>       self.rg.NEWUSER()\n\ntestCases\\test_Devnagri.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\Devnagri.py:28: in NEWUSER\n    self.driver.find_element(*Register.Newuser_XPATH).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B5D2216D90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\tRtlInitializeExceptionChain [0x773CB79B+107]\\\\n\\\\tRtlClearBits [0x773CB71F+191]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'New user')]\"}\nE         (Session info: chrome=115.0.5790.111); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x002DA813+48355]\nE       \t(No symbol) [0x0026C4B1]\nE       \t(No symbol) [0x00175358]\nE       \t(No symbol) [0x001A09A5]\nE       \t(No symbol) [0x001A0B3B]\nE       \t(No symbol) [0x001CE232]\nE       \t(No symbol) [0x001BA784]\nE       \t(No symbol) [0x001CC922]\nE       \t(No symbol) [0x001BA536]\nE       \t(No symbol) [0x001982DC]\nE       \t(No symbol) [0x001993DD]\nE       \tGetHandleVerifier [0x0053AABD+2539405]\nE       \tGetHandleVerifier [0x0057A78F+2800735]\nE       \tGetHandleVerifier [0x0057456C+2775612]\nE       \tGetHandleVerifier [0x003651E0+616112]\nE       \t(No symbol) [0x00275F8C]\nE       \t(No symbol) [0x00272328]\nE       \t(No symbol) [0x0027240B]\nE       \t(No symbol) [0x00264FF7]\nE       \tBaseThreadInitThunk [0x76397D59+25]\nE       \tRtlInitializeExceptionChain [0x773CB79B+107]\nE       \tRtlClearBits [0x773CB71F+191]\nE       \t(No symbol) [0x00000000]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "attachments": [{"name": "log", "source": "11ba7579-5da6-491c-8121-dceb7f5c883c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7ba47147-e161-4ead-9bc6-6461bb6d9374-attachment.txt", "type": "text/plain"}], "start": 1691161412367, "stop": 1691161449573, "uuid": "5511e0ce-5e34-4b11-8202-358635f15d08", "historyId": "9edde39f0d42423a613e4051796ec09d", "testCaseId": "9edde39f0d42423a613e4051796ec09d", "fullName": "testCases.test_Devnagri.Test_register_001#test_devnagriregister", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Devnagri"}, {"name": "subSuite", "value": "Test_register_001"}, {"name": "host", "value": "VARSHA"}, {"name": "thread", "value": "6716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Devnagri"}]}